-- this sql file creates the recommendation_features table which is used in the recommendation model
-- run this after all tables have been uploaded to snowflake

CREATE OR REPLACE TABLE RECOMMENDATION_FEATURES AS
WITH LISTENS_WITH_BUCKET AS (
  SELECT 
    LR.SONG_ID,
    LR.USER,
    LR.SKIPPED,
    CASE 
      WHEN EXTRACT(HOUR FROM LR.TIMESTAMP) BETWEEN 10 AND 17 THEN 'MORNING'
      WHEN EXTRACT(HOUR FROM LR.TIMESTAMP) BETWEEN 17 AND 23 THEN 'AFTERNOON'
      ELSE 'NIGHT'
    END AS TIME_BUCKET
  FROM LISTENING_RECORDS LR
),
SONG_AGG AS (
  SELECT
    SONG_ID,
    AVG(CASE WHEN SKIPPED THEN 1 ELSE 0 END) AS SKIPPED_RATIO,
    COUNT_IF(TIME_BUCKET = 'MORNING') / COUNT(*) AS MORNING_RATIO,
    COUNT_IF(TIME_BUCKET = 'AFTERNOON') / COUNT(*) AS AFTERNOON_RATIO,
    COUNT_IF(TIME_BUCKET = 'NIGHT') / COUNT(*) AS NIGHT_RATIO
  FROM LISTENS_WITH_BUCKET
  GROUP BY SONG_ID
),
USER_ARTIST_LISTENS AS (
  SELECT
    S.ARTIST_ID,
    LR.USER,
    COUNT(*) AS LISTEN_COUNT
  FROM LISTENING_RECORDS LR
  JOIN SONGS S ON LR.SONG_ID = S.SONG_ID
  GROUP BY S.ARTIST_ID, LR.USER
),
USER_TOTAL_LISTENS AS (
  SELECT
    USER,
    COUNT(*) AS TOTAL_LISTENS
  FROM LISTENING_RECORDS
  GROUP BY USER
),
USER_ARTIST_PREF AS (
  SELECT
    UAL.ARTIST_ID,
    UAL.USER,
    CAST(UAL.LISTEN_COUNT AS FLOAT) / UTL.TOTAL_LISTENS AS RAW_PREF
  FROM USER_ARTIST_LISTENS UAL
  JOIN USER_TOTAL_LISTENS UTL ON UAL.USER = UTL.USER
),
USER_PREF_NORMALIZED AS (
  SELECT
    ARTIST_ID,
    USER,
    CASE
      WHEN MAX(RAW_PREF) OVER (PARTITION BY USER) = MIN(RAW_PREF) OVER (PARTITION BY USER) THEN 1
      ELSE
        COALESCE(
          (RAW_PREF - MIN(RAW_PREF) OVER (PARTITION BY USER)) /
          NULLIF(MAX(RAW_PREF) OVER (PARTITION BY USER) - MIN(RAW_PREF) OVER (PARTITION BY USER), 0),
        0)
    END AS USER_PREF_SCORE
  FROM USER_ARTIST_PREF
),
PIVOT_PREFS AS (
  SELECT
    ARTIST_ID,
    MAX(CASE WHEN USER = 'Claire' THEN USER_PREF_SCORE END) AS CLAIRE_SCORE,
    MAX(CASE WHEN USER = 'Jasmine' THEN USER_PREF_SCORE END) AS JASMINE_SCORE,
    MAX(CASE WHEN USER = 'Sasha' THEN USER_PREF_SCORE END) AS SASHA_SCORE
  FROM USER_PREF_NORMALIZED
  GROUP BY ARTIST_ID
)

SELECT
  S.SONG_ID,
  S.SONG_NAME,
  S.ARTIST_ID,
  A.GENRE_ID,
  G.GENRE_NAME,
  S.POPULARITY,
  S.RELEASE_DATE,
  S.IS_LISTENED_BEFORE,
  SA.SKIPPED_RATIO,
  SA.MORNING_RATIO,
  SA.AFTERNOON_RATIO,
  SA.NIGHT_RATIO,
  PP.CLAIRE_SCORE,
  PP.JASMINE_SCORE,
  PP.SASHA_SCORE
FROM SONGS S
LEFT JOIN ARTISTS A ON S.ARTIST_ID = A.ARTIST_ID
LEFT JOIN GENRES G ON A.GENRE_ID = G.GENRE_ID
LEFT JOIN SONG_AGG SA ON S.SONG_ID = SA.SONG_ID
LEFT JOIN PIVOT_PREFS PP ON S.ARTIST_ID = PP.ARTIST_ID;